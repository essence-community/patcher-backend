/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.4/userguide/java_library_plugin.html
 */
buildscript {
	ext {
		kotlin_version = '1.3.61'
		git_plugin_version = '3.1.1'
		junit_version = '4.11'
		commons_cli_version = '1.4'
		jaxb_api_version = '2.3.1'
		jaxb_impl_version = '2.3.1'
		jdbi3_version = '3.9.1'
		jdbi3_oracle12_version = '3.5.1'
		postgresql_version = '42.2.6'
		oracle_version='12.1.0.2'
		istack_commons_runtime_version='3.0.8'
		jackson_vesion = '2.9.9'
	}
	repositories {
	    jcenter()
       	mavenCentral()
       	maven {
      		url "https://plugins.gradle.org/m2/"
    	}
    }
    dependencies {
       	classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
       	classpath "org.ajoberstar.grgit:grgit-gradle:$git_plugin_version"
    }
}

apply plugin:"org.ajoberstar.grgit"
apply plugin:'eclipse'
apply plugin:'eclipse-wtp'
apply plugin:'java'
apply plugin:'kotlin'
sourceCompatibility = 1.8
targetCompatibility = 1.8
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
    flatDir {
            dirs "$rootProject.projectDir/libs"
        }
}

	dependencies {
	    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
	    compile "commons-cli:commons-cli:$commons_cli_version"
	    compile "javax.xml.bind:jaxb-api:$jaxb_api_version"
	    compile "com.sun.xml.bind:jaxb-impl:$jaxb_impl_version"
	    compile "org.jdbi:jdbi3-kotlin:$jdbi3_version"
	    compile "org.jdbi:jdbi3-kotlin-sqlobject:$jdbi3_version"
	    compile "org.jdbi:jdbi3-postgres:$jdbi3_version"
	    compile "org.jdbi:jdbi3-oracle12:$jdbi3_oracle12_version"
	    compile "org.postgresql:postgresql:$postgresql_version"
	    compile "com.oracle:ojdbc7:$oracle_version"
	    compile "com.oracle:orai18n:$oracle_version"
	    compile "com.sun.istack:istack-commons-runtime:$istack_commons_runtime_version"
	    compile "com.fasterxml.jackson.core:jackson-databind:$jackson_vesion"
	    compile "com.fasterxml.jackson.core:jackson-core:$jackson_vesion"
	    testCompile "junit:junit:$junit_version"
        testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
	}
	
	compileJava.options.encoding = 'UTF-8'
	File eclipseoutput = file('bin')

	build.doLast {
		copy{
			from(sourceSets.main.output.classesDirs){
				include '**/*.*'
			}
			into eclipseoutput
			includeEmptyDirs = false
		}
		copy{
			from(sourceSets.main.output.resourcesDir){
				include '**/*.*'
			}
			into eclipseoutput
			includeEmptyDirs = false
		}
		copy{
			from('build/tmp/jar'){
				include '**/*.*'
			}
			into file('bin/META-INF')
			includeEmptyDirs = false
		}
	}
	compileKotlin.doLast {
	    File dir = it.properties.destinationDir
        copy{
			from(dir){
				include '**/*.*'
			}
			into eclipseoutput
			includeEmptyDirs = false
		}	
	}
		jar.doFirst{
			String vendor = "Ivan Artemov (i.artemov@abr-region.ru)"
			String version = "1.0.0-${grgit ? grgit.head().abbreviatedId : ''}"
			String appName = "core-patcher"
			manifest {
				attributes("Manifest-Version": "1.0",
				"Created-By": "${vendor}",
				"Built-With": "gradle-${project.getGradle().getGradleVersion()}, groovy-${GroovySystem.getVersion()}",
				"Specification-Title": "${appName}",
				"Specification-Version": "${version}",
				"Specification-Vendor": "${vendor}",
				"Implementation-Title": "${appName}",
				"Implementation-Version": "${version}",
				"Implementation-Vendor": "${vendor}",
				"Built-By": System.getProperty('user.name'),
				"Built-JDK": System.getProperty('java.version'),
				"Build-Time-ISO-8601": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
				"Main-Class": "ru.opencore.patcher.MainKt",
				"Class-Path": configurations.compile.collect{(it.getName().indexOf('ejb') == -1 ? "lib/" : './') + it.getName()}.join(' ')
				)
			}
		}
	eclipse {
		classpath {
			defaultOutputDir = eclipseoutput
		}
	}
	clean {
		delete eclipseoutput
	}
	jar.doLast {
	    copy{
			from configurations.default
  			into "$buildDir/libs/lib"
			includeEmptyDirs = false
		}	
	}
